name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      create_tag:
        description: 'Create tag if it does not exist'
        required: false
        type: boolean
        default: true

jobs:
  create-tag:
    if: github.event_name == 'workflow_dispatch' && inputs.create_tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ inputs.version }}
          git push origin ${{ inputs.version }}

  build-release:
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped')
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            python_cmd: python
            artifact_name: StreamCap-Windows
            installer_name: StreamCap-Windows-Installer.exe
          - os: macos-latest
            platform: macos
            python_cmd: python3
            artifact_name: StreamCap-macOS
            installer_name: StreamCap-macOS-Installer.dmg

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update version in pyproject.toml
        run: |
          VERSION_NUMBER="${{ steps.get_version.outputs.version_number }}"
          cat > update_version.py << 'EOF'
          import tomllib
          import tomli_w
          import sys
          
          version = sys.argv[1]
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          data['project']['version'] = version
          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(data, f)
          EOF
          
          if [ "${{ matrix.platform }}" = "windows" ]; then
            python update_version.py "$VERSION_NUMBER"
          else
            python3 update_version.py "$VERSION_NUMBER"
          fi
          rm update_version.py
        shell: bash

      - name: Install tomli_w for version update
        run: poetry run pip install tomli_w

      - name: Build with Flet (Windows)
        if: matrix.platform == 'windows'
        run: |
          poetry run flet pack main.py --name StreamCap --icon assets/icon.ico --add-data "assets;assets" --add-data "config;config" --distpath dist --onefile
          
          # Create installer using NSIS or Inno Setup (if available)
          if command -v makensis &> /dev/null; then
            echo "Creating NSIS installer..."
            # Create NSIS script for installer
            cat > installer.nsi << 'EOF'
            !define APP_NAME "StreamCap"
            !define APP_VERSION "${{ steps.get_version.outputs.version_number }}"
            !define APP_PUBLISHER "StreamCap Team"
            !define APP_URL "https://github.com/ihmily/StreamCap"
            !define APP_SUPPORT_URL "https://github.com/ihmily/StreamCap/issues"
            !define APP_UPDATES_URL "https://github.com/ihmily/StreamCap/releases"
            
            Name "${APP_NAME}"
            OutFile "StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe"
            InstallDir "$PROGRAMFILES\${APP_NAME}"
            
            Section "MainSection" SEC01
              SetOutPath "$INSTDIR"
              File "dist\StreamCap.exe"
              CreateDirectory "$SMPROGRAMS\${APP_NAME}"
              CreateShortCut "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk" "$INSTDIR\StreamCap.exe"
              CreateShortCut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\StreamCap.exe"
            SectionEnd
            EOF
            makensis installer.nsi
          else
            echo "NSIS not available, copying executable as installer"
            cp "dist/StreamCap.exe" "StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe"
          fi
          
          # Create portable zip
          mkdir -p "dist/StreamCap-Portable"
          cp "dist/StreamCap.exe" "dist/StreamCap-Portable/"
          cp -r assets "dist/StreamCap-Portable/" 2>/dev/null || true
          cp -r config "dist/StreamCap-Portable/" 2>/dev/null || true
          cd dist && zip -r "StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip" StreamCap-Portable/
        shell: bash

      - name: Build with Flet (macOS)
        if: matrix.platform == 'macos'
        run: |
          poetry run flet pack main.py --name StreamCap --icon assets/icon.icns --add-data "assets:assets" --add-data "config:config" --distpath dist
          
          # Create DMG installer
          mkdir -p "dist/dmg"
          cp -r "dist/StreamCap.app" "dist/dmg/"
          
          # Create DMG
          hdiutil create -volname "StreamCap ${{ steps.get_version.outputs.version_number }}" \
            -srcfolder "dist/dmg" \
            -ov -format UDZO \
            "dist/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg"
        shell: bash

      - name: Verify build artifacts
        run: |
          echo "Build artifacts:"
          ls -la
          ls -la dist/ 2>/dev/null || echo "No dist directory"
          
          # Move artifacts to expected locations
          if [ "${{ matrix.platform }}" = "windows" ]; then
            ls -la "StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe" || echo "Windows installer not found"
            ls -la "dist/StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip" || echo "Windows zip not found"
          else
            ls -la "dist/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg" || echo "macOS DMG not found"
          fi
        shell: bash

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: |
            StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe
            dist/StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip
            dist/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg
          retention-days: 90

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    if: always() && needs.build-release.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.exe" -exec cp {} release-assets/ \;
          find artifacts -name "*.dmg" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Read version updates from config
        id: read_updates
        run: |
          VERSION_NUMBER="${{ steps.get_version.outputs.version_number }}"
          cat > read_updates.py << 'EOF'
          import json
          import sys
          
          version_number = sys.argv[1]
          try:
              with open('config/version.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              for update in data['version_updates']:
                  if update['version'] == version_number:
                      en_updates = '\n'.join(['- ' + item for item in update['updates']['en']])
                      zh_updates = '\n'.join(['- ' + item for item in update['updates']['zh_CN']])
                      print(f"## What's New / 更新内容\n\n### English\n{en_updates}\n\n### 中文\n{zh_updates}")
                      break
              else:
                  print("## What's New / 更新内容\n\n### English\n- Bug fixes and improvements\n\n### 中文\n- 错误修复和改进")
          except FileNotFoundError:
              print("## What's New / 更新内容\n\n### English\n- Bug fixes and improvements\n\n### 中文\n- 错误修复和改进")
          EOF
          
          UPDATES=$(python3 read_updates.py "$VERSION_NUMBER")
          rm read_updates.py
          echo "updates<<EOF" >> $GITHUB_OUTPUT
          echo "$UPDATES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: StreamCap ${{ steps.get_version.outputs.version }}
          body: |
            # StreamCap ${{ steps.get_version.outputs.version }}
            
            ${{ steps.read_updates.outputs.updates }}
            
            ## Download / 下载
            
            ### Windows
            - **StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe** - Windows installer (推荐)
            - **StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip** - Portable version
            
            ### macOS
            - **StreamCap-${{ steps.get_version.outputs.version_number }}.dmg** - macOS installer
            
            ## System Requirements / 系统要求
            
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.14 or later
            - **Python**: 3.10+ (if running from source)
            
            ## Installation / 安装说明
            
            ### Windows
            1. Download the `.exe` installer
            2. Run as administrator
            3. Follow the installation wizard
            
            ### macOS
            1. Download the `.dmg` file
            2. Open and drag StreamCap to Applications folder
            3. Allow the app in System Preferences > Security & Privacy if needed
            
            ---
            
            **Full Changelog**: https://github.com/ihmily/StreamCap/compare/v${{ steps.get_version.outputs.version_number }}...HEAD
          draft: false
          prerelease: false
          files: |
            release-assets/StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe
            release-assets/StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip
            release-assets/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg

      - name: Notify release completion
        run: |
          echo "🎉 Release ${{ steps.get_version.outputs.version }} has been created successfully!"
          echo "📦 Installers for Windows and macOS have been uploaded."
          echo "🔗 Release URL: ${{ steps.create_release.outputs.url }}"