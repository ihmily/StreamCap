name: Release Application

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.1)'
        required: true
        type: string
      create_tag:
        description: 'Create new tag'
        required: true
        type: boolean
        default: true

jobs:
  create-tag:
    if: github.event_name == 'workflow_dispatch' && inputs.create_tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ inputs.version }}
        git push origin ${{ inputs.version }}

  build-release:
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped')
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            artifact_name: StreamCap-Windows
            installer_name: StreamCap-Windows-Installer.zip
          - os: macos-latest
            platform: macos
            extension: .app
            artifact_name: StreamCap-macOS
            installer_name: StreamCap-macOS-Installer.dmg

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install additional dependencies for packaging
      run: |
        poetry run pip install --upgrade pip
        poetry run pip install flet[desktop,cli]

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Update version in pyproject.toml
      run: |
        VERSION_NUMBER="${{ steps.get_version.outputs.version_number }}"
        if [ "${{ matrix.platform }}" = "windows" ]; then
          python -c "
import tomllib
import tomli_w
with open('pyproject.toml', 'rb') as f:
    data = tomllib.load(f)
data['project']['version'] = '$VERSION_NUMBER'
with open('pyproject.toml', 'wb') as f:
    tomli_w.dump(data, f)
"
        else
          python3 -c "
import tomllib
import tomli_w
with open('pyproject.toml', 'rb') as f:
    data = tomllib.load(f)
data['project']['version'] = '$VERSION_NUMBER'
with open('pyproject.toml', 'wb') as f:
    tomli_w.dump(data, f)
"
        fi
      shell: bash

    - name: Install tomli_w for version update
      run: poetry run pip install tomli_w

    - name: Build application (Windows)
      if: matrix.platform == 'windows'
      run: |
        poetry run flet pack main.py --name StreamCap --icon assets/icon.ico --distpath dist --add-data "assets;assets" --add-data "config;config" --add-data "locales;locales"
      shell: cmd

    - name: Build application (macOS)
      if: matrix.platform == 'macos'
      run: |
        poetry run flet pack main.py --name StreamCap --icon assets/icon.ico --distpath dist --add-data "assets:assets" --add-data "config:config" --add-data "locales:locales"

    - name: Create installer (Windows)
      if: matrix.platform == 'windows'
      run: |
        # Create NSIS installer script
        cat > installer.nsi << 'EOF'
        !define APP_NAME "StreamCap"
        !define APP_VERSION "${{ steps.get_version.outputs.version_number }}"
        !define APP_PUBLISHER "Hmily"
        !define APP_URL "https://github.com/ihmily/StreamCap"
        !define APP_EXECUTABLE "StreamCap.exe"
        
        Name "${APP_NAME}"
        OutFile "StreamCap-${APP_VERSION}-Setup.exe"
        InstallDir "$PROGRAMFILES\${APP_NAME}"
        
        Page directory
        Page instfiles
        
        Section "Install"
          SetOutPath "$INSTDIR"
          File "dist\StreamCap.exe"
          File /r "assets"
          File /r "config"
          File /r "locales"
          
          CreateDirectory "$SMPROGRAMS\${APP_NAME}"
          CreateShortCut "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk" "$INSTDIR\${APP_EXECUTABLE}"
          CreateShortCut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\${APP_EXECUTABLE}"
          
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "DisplayName" "${APP_NAME}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "UninstallString" "$INSTDIR\uninstall.exe"
          WriteUninstaller "$INSTDIR\uninstall.exe"
        SectionEnd
        
        Section "Uninstall"
          Delete "$INSTDIR\${APP_EXECUTABLE}"
          Delete "$INSTDIR\uninstall.exe"
          RMDir /r "$INSTDIR"
          Delete "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk"
          Delete "$DESKTOP\${APP_NAME}.lnk"
          RMDir "$SMPROGRAMS\${APP_NAME}"
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}"
        SectionEnd
        EOF
        
        # Install NSIS and create installer
        choco install nsis -y
        makensis installer.nsi
        
        # Fallback: create zip if NSIS fails
        cd dist
        7z a -tzip StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip StreamCap.exe
      shell: bash

    - name: Create installer (macOS)
      if: matrix.platform == 'macos'
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Create DMG installer
        create-dmg \
          --volname "StreamCap ${{ steps.get_version.outputs.version_number }}" \
          --volicon "assets/icon.ico" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "StreamCap.app" 175 120 \
          --hide-extension "StreamCap.app" \
          --app-drop-link 425 120 \
          --eula "LICENSE" \
          "dist/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg" \
          "dist/"

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.platform }}
        path: |
          StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe
          dist/StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip
          dist/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg
        retention-days: 90

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    if: always() && needs.build-release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.exe" -exec cp {} release-assets/ \;
        find artifacts -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Read version updates from config
      id: read_updates
      run: |
        VERSION_NUMBER="${{ steps.get_version.outputs.version_number }}"
        UPDATES=$(python3 -c "
import json
with open('config/version.json', 'r', encoding='utf-8') as f:
    data = json.load(f)
for update in data['version_updates']:
    if update['version'] == '$VERSION_NUMBER':
        en_updates = '\n'.join(['- ' + item for item in update['updates']['en']])
        zh_updates = '\n'.join(['- ' + item for item in update['updates']['zh_CN']])
        print(f'## What\\'s New / 更新内容\n\n### English\n{en_updates}\n\n### 中文\n{zh_updates}')
        break
else:
    print('## What\\'s New / 更新内容\n\n### English\n- Bug fixes and improvements\n\n### 中文\n- 错误修复和改进')
")
        echo "updates<<EOF" >> $GITHUB_OUTPUT
        echo "$UPDATES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: StreamCap ${{ steps.get_version.outputs.version }}
        body: |
          # StreamCap ${{ steps.get_version.outputs.version }}
          
          ${{ steps.read_updates.outputs.updates }}
          
          ## Download / 下载
          
          ### Windows
          - **StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe** - Windows installer (推荐)
          - **StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip** - Portable version
          
          ### macOS
          - **StreamCap-${{ steps.get_version.outputs.version_number }}.dmg** - macOS installer
          
          ## System Requirements / 系统要求
          
          - **Windows**: Windows 10 or later
          - **macOS**: macOS 10.14 or later
          - **Python**: 3.10+ (if running from source)
          
          ## Installation / 安装说明
          
          ### Windows
          1. Download the `.exe` installer
          2. Run as administrator
          3. Follow the installation wizard
          
          ### macOS
          1. Download the `.dmg` file
          2. Open and drag StreamCap to Applications folder
          3. Allow the app in System Preferences > Security & Privacy if needed
          
          ---
          
          **Full Changelog**: https://github.com/ihmily/StreamCap/compare/v${{ steps.get_version.outputs.version_number }}...HEAD
        draft: false
        prerelease: false
        files: |
          release-assets/StreamCap-${{ steps.get_version.outputs.version_number }}-Setup.exe
          release-assets/StreamCap-Windows-${{ steps.get_version.outputs.version_number }}.zip
          release-assets/StreamCap-${{ steps.get_version.outputs.version_number }}.dmg

    - name: Notify release completion
      run: |
        echo "🎉 Release ${{ steps.get_version.outputs.version }} has been created successfully!"
        echo "📦 Installers for Windows and macOS have been uploaded."
        echo "🔗 Release URL: ${{ steps.create_release.outputs.url }}"